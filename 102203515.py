# -*- coding: utf-8 -*-
"""102203515.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SNMhoTz0lsvN7rUqIWPnQB0v9gZk47Y6
"""

!pip install pytube moviepy pydub

import sys
import os
from pytube import Search, YouTube
from moviepy.editor import AudioFileClip
from pydub import AudioSegment
from pydub.playback import play

def download_videos(singer_name, num_videos):
    search_results = Search(singer_name).results[:num_videos]
    video_files = []
    for video in search_results:
        yt = YouTube(video.watch_url)
        stream = yt.streams.filter(only_audio=True).first()
        filename = f"{yt.title}.mp4"
        stream.download(filename=filename)
        video_files.append(filename)
    return video_files

def convert_videos_to_audio(video_files):
    audio_files = []
    for video in video_files:
        audio = AudioFileClip(video)
        audio_filename = f"{os.path.splitext(video)[0]}.mp3"
        audio.write_audiofile(audio_filename)
        audio_files.append(audio_filename)
    return audio_files

def trim_and_merge_audios(audio_files, trim_duration, output_file):
    merged_audio = AudioSegment.empty()
    for audio in audio_files:
        segment = AudioSegment.from_file(audio)[:trim_duration * 1000]
        merged_audio += segment
    merged_audio.export(output_file, format="mp3")

def main():
    # Replace with actual command-line args in production
    args = ["program.py", "Sharry Maan", 10, 20, "output.mp3"]
    if len(args) != 5:
        print("Usage: python program.py <SingerName> <NumberOfVideos> <AudioDuration> <OutputFileName>")
        return

    _, singer_name, num_videos, audio_duration, output_file = args
    try:
        num_videos = int(num_videos)
        audio_duration = int(audio_duration)
        if num_videos < 10 or audio_duration < 20:
            raise ValueError("Number of videos must be >= 10 and audio duration >= 20 seconds.")

        # Process
        video_files = download_videos(singer_name, num_videos)
        audio_files = convert_videos_to_audio(video_files)
        trim_and_merge_audios(audio_files, audio_duration, output_file)
        print(f"Mashup created successfully: {output_file}")
    except Exception as e:
        print(f"Error: {e}")

# Execute Main Function
main()

!pip install flask flask-mail pytube moviepy pydub

from flask import Flask, request, send_file, jsonify
from flask_mail import Mail, Message
import os
import zipfile

app = Flask(__name__)

# Flask-Mail Configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USERNAME'] = 'your_email@gmail.com'  # Replace with your email
app.config['MAIL_PASSWORD'] = 'your_password'        # Replace with your email password
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USE_SSL'] = False

mail = Mail(app)

# Mashup Endpoint
@app.route('/mashup', methods=['POST'])
def mashup():
    data = request.json
    singer_name = data.get('singer_name')
    num_videos = int(data.get('num_videos'))
    audio_duration = int(data.get('audio_duration'))
    email = data.get('email')

    # Validate Inputs
    if not singer_name or num_videos < 10 or audio_duration < 20 or not email:
        return jsonify({"error": "Invalid input parameters"}), 400

    try:
        # Perform Mashup Processing (Reuse functions from Program 1)
        video_files = download_videos(singer_name, num_videos)
        audio_files = convert_videos_to_audio(video_files)
        output_file = "mashup.mp3"
        trim_and_merge_audios(audio_files, audio_duration, output_file)

        # Zip the File
        zip_file = "mashup.zip"
        with zipfile.ZipFile(zip_file, 'w') as zf:
            zf.write(output_file)

        # Send Email
        msg = Message("Your Mashup is Ready", sender="your_email@gmail.com", recipients=[email])
        with app.open_resource(zip_file) as fp:
            msg.attach(zip_file, "application/zip", fp.read())
        mail.send(msg)
        return jsonify({"message": "Mashup sent successfully!"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)

!pip install pytube moviepy pydub

import os
from pytube import Search
from moviepy.editor import AudioFileClip
from pydub import AudioSegment

def verify_inputs(singer_name, num_videos, trim_duration, output_file):
    # Check if singer name is provided
    if not singer_name.strip():
        raise ValueError("Singer name cannot be empty.")

    # Check if number of videos is a positive integer >= 10
    if not isinstance(num_videos, int) or num_videos < 10:
        raise ValueError("Number of videos must be an integer greater than or equal to 10.")

    # Check if trim duration is a positive integer >= 20
    if not isinstance(trim_duration, int) or trim_duration < 20:
        raise ValueError("Trim duration must be an integer greater than or equal to 20 seconds.")

    # Check if output file has a valid name
    if not output_file.endswith(".mp3"):
        raise ValueError("Output file name must end with '.mp3'.")

    print("Input parameters verified successfully!")

# Function to check if dependencies are installed
def verify_dependencies():
    try:
        import pytube
        import moviepy
        import pydub
        print("All required libraries are installed.")
    except ImportError as e:
        raise ImportError("Some required libraries are missing. Please install them.") from e

def main():
    try:
        # Example inputs
        singer_name = "Honey Singh"      # Singer name
        num_videos = 10                  # Number of videos to download
        trim_duration = 30               # Trim duration in seconds
        output_file = "honey_singh_mashup.mp3"  # Output file name

        # Verify inputs
        verify_inputs(singer_name, num_videos, trim_duration, output_file)

        # Verify dependencies
        verify_dependencies()

        # Simulate downloading videos (dummy check)
        search_results = Search(singer_name).results[:num_videos]
        if not search_results:
            raise ValueError(f"No videos found for singer: {singer_name}")
        print(f"✅ Found {len(search_results)} videos for {singer_name}.")

        # If all checks pass
        print("🎉 All submission requirements are satisfied. You can proceed!")
    except Exception as e:
        print(f"❌ Error: {e}")

# Run the main function
main()